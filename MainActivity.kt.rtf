{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 package com.technical.coding.myapplication\
\
import android.content.Context\
import android.net.ConnectivityManager\
import android.net.Network\
import android.net.NetworkCapabilities\
import android.net.NetworkRequest\
import android.os.Build\
import android.os.Bundle\
import android.widget.Toast\
import androidx.activity.EdgeToEdge\
import androidx.appcompat.app.AppCompatActivity\
import androidx.core.view.ViewCompat\
import androidx.core.view.WindowInsetsCompat\
\
class MainActivity : AppCompatActivity() \{\
\
    private lateinit var connectivityManager: ConnectivityManager\
    private lateinit var networkCallback: ConnectivityManager.NetworkCallback\
\
    override fun onCreate(savedInstanceState: Bundle?) \{\
        super.onCreate(savedInstanceState)\
        EdgeToEdge.enable(this)\
        setContentView(R.layout.activity_main)\
\
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) \{ v, insets ->\
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\
            insets\
        \}\
\
        connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\
\
        networkCallback = object : ConnectivityManager.NetworkCallback() \{\
            override fun onAvailable(network: Network) \{\
                Toast.makeText(this@MainActivity, "Internet is On", Toast.LENGTH_SHORT).show()\
            \}\
\
            override fun onLost(network: Network) \{\
                Toast.makeText(this@MainActivity, "Internet is Off", Toast.LENGTH_SHORT).show()\
            \}\
        \}\
    \}\
\
    override fun onResume() \{\
        super.onResume()\
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) \{\
            connectivityManager.registerDefaultNetworkCallback(networkCallback)\
        \} else \{\
            val networkRequest = NetworkRequest.Builder()\
                .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\
                .build()\
            connectivityManager.registerNetworkCallback(networkRequest, networkCallback)\
        \}\
    \}\
\
    override fun onPause() \{\
        super.onPause()\
        connectivityManager.unregisterNetworkCallback(networkCallback)\
    \}\
\}\
}